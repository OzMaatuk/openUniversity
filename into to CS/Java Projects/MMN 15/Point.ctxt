#BlueJ class context
comment0.params=
comment0.target=Point()
comment0.text=\r\n\ empty\ constartur\:\r\n\ public\ Point()\ -\ sets\ zero\ values\ for\ transverse\ place\ (x)\ and\ horizontal\ place\ (y).\r\n\ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\r\n
comment1.params=x\ y
comment1.target=Point(double,\ double)
comment1.text=\r\n\ first\ constartur\:\r\n\ public\ Point(double\ x,\ double\ y)\ -\ gets\ values\ for\ transverse\ place\ (x)\ and\ horizontal\ place\ (y)\ and\ set\ a\ new\ Point\ with\ those\ values.\r\n\ \r\n\ @param\ \ \ double\ x\ -\ the\ transverse\ value\ of\ the\ point.\r\n\ @param\ \ \ double\ y\ -\ the\ horizontal\ value\ of\ the\ point.\r\n\ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\r\n
comment10.params=other
comment10.target=boolean\ isUnder(Point)
comment10.text=\r\n\ public\ boolean\ isUnder(Point\ other)\ -\ gets\ an\ other\ point\ and\ check\ if\ its\ above\ this\ point.\r\n\ \r\n\ @param\ \ \ other\ -\ the\ point\ we\ check\ if\ it\ above\ this\ point.\r\n\ @return\ \ true\ if\ the\ other\ point\ is\ above\ this\ point,\r\n\ \ \ \ \ \ \ \ \ \ false\ if\ its\ not.\r\n\ \ \ \ \ \ \ \ \ \ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\r\n
comment11.params=other
comment11.target=boolean\ isLeft(Point)
comment11.text=\r\n\ public\ boolean\ isLeft(Point\ other)\ -\ gets\ an\ other\ point\ and\ check\ if\ it\ left\ to\ this\ point.\r\n\ \r\n\ @param\ \ \ other\ -\ the\ point\ we\ check\ if\ it\ left\ to\ this\ point.\r\n\ @return\ \ true\ if\ the\ other\ point\ is\ left\ to\ this\ point,\r\n\ \ \ \ \ \ \ \ \ \ false\ if\ its\ not.\r\n\ \ \ \ \ \ \ \ \ \ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\r\n
comment12.params=other
comment12.target=boolean\ isRight(Point)
comment12.text=\r\n\ public\ boolean\ isRight(Point\ other)\ -\ gets\ an\ other\ point\ and\ check\ if\ it\ right\ to\ this\ point.\r\n\ \r\n\ @param\ \ \ other\ -\ the\ point\ we\ check\ if\ it\ right\ to\ this\ point.\r\n\ @return\ \ true\ if\ the\ other\ point\ is\ right\ to\ this\ point,\r\n\ \ \ \ \ \ \ \ \ \ false\ if\ its\ not.\r\n\ \ \ \ \ \ \ \ \ \ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\ \ \ \ \ \ \ \ \ \r\n
comment13.params=p
comment13.target=double\ distance(Point)
comment13.text=\r\n\ public\ double\ distance(Point\ p)\ -\ get\ an\ other\ (p)\ Point\ calculate\ the\ distance\ between\ it\ and\ this\ Point\r\n\ \r\n\ @param\ \ \ p\ -\ the\ other\ point\ we\ calculate\ the\ distance\ from.\r\n\ @return\ \ the\ distance\ betweenthe\ new\ point\ (p)\ and\ this\ Point.\r\n\ \r\n\ @Time\:\ \ \ O(Math.sqrt())\ \=\ O(1)?;\r\n\ @Place\:\ \ O(1);\r\n
comment14.params=dx\ dy
comment14.target=void\ move(double,\ double)
comment14.text=\r\n\ public\ void\ move(double\ dx,\ double\ dy)\ -\ change\ the\ transverse\ (x),\ and\ horizontal\ (y)\ values\ of\ the\ Point\ by\ the\ values\ it\ gets\ (dx\ and\ dy)\r\n\ \r\n\ @param\ dx\ -\ the\ value\ to\ add\ on\ the\ transverse\ line\ (_x\ value),\r\n\ @param\ dy\ -\ the\ value\ to\ add\ on\ the\ horizontal\ line\ (_y\ value).\r\n\ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\r\n
comment2.params=other
comment2.target=Point(Point)
comment2.text=\r\n\ secound\ constartur\:\r\n\ public\ Point(Point\ other)\ -\ gets\ an\ other\ Point\ object\ and\ creat\ a\ new\ onr\ with\ the\ same\ transverse\ (x),\ and\ horizontal\ (y)\ value.\r\n\ \r\n\ @param\ \ \ Point\ other\ -\ the\ object\ to\ copy\ from.\r\n\ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\r\n
comment3.params=
comment3.target=double\ getX()
comment3.text=\r\n\ public\ double\ getX()\ -\ returns\ the\ transverse\ value\ (_x)\ of\ the\ point.\r\n\ \r\n\ @return\ \ the\ transverse\ value\ (_x)\ of\ the\ point.\r\n\ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\r\n
comment4.params=
comment4.target=double\ getY()
comment4.text=\r\n\ public\ double\ getY()\ -\ returns\ the\ horizontal\ value\ (_y)\ of\ the\ point.\r\n\ \r\n\ @return\ \ the\ horizontal\ value\ (_y)\ of\ the\ point.\r\n\ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\r\n
comment5.params=num
comment5.target=void\ setX(double)
comment5.text=\r\n\ public\ void\ setX(double\ num)\ -\ get\ a\ new\ value\ (num)\ and\ set\ it\ as\ the\ transverse\ value\ (_x).\r\n\ \r\n\ @param\ \ \ num\ -\ the\ value\ to\ be\ set\ as\ the\ transverse\ value\ (_x).\r\n\ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\r\n
comment6.params=num
comment6.target=void\ setY(double)
comment6.text=\r\n\ public\ void\ setY(double\ num)\ -\ get\ a\ new\ value\ (num)\ and\ set\ it\ as\ the\ horizontal\ value\ (_y).\r\n\ \r\n\ @param\ \ \ num\ -\ the\ value\ to\ be\ set\ as\ the\ horizontal\ value\ (_y).\r\n\ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\r\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment7.text=\r\n\ public\ String\ toString()\ -\ returns\ the\ Point\ value\ by\ his\ math\ expression.\r\n\ \r\n\ @return\ \ the\ Point\ value\ by\ his\ math\ expression.\r\n\ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\r\n
comment8.params=other
comment8.target=boolean\ equals(Point)
comment8.text=\r\n\ public\ boolean\ equals(Point\ other)\ -\ get\ a\ other\ Point\ and\ check\ if\ the\ transverse\ (x),\ and\ horizontal\ (y)\ values\ are\ same\ as\ this\ Point.\r\n\ \r\n\ @param\ \ \ other\ -\ the\ other\ Point\ with\ the\ values\ to\ compare.\r\n\ @return\ \ ture\ if\ the\ values\ are\ the\ same,\r\n\ \ \ \ \ \ \ \ \ \ false\ if\ they\ are\ differents.\r\n\ \ \ \ \ \ \ \ \ \ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\r\n
comment9.params=other
comment9.target=boolean\ isAbove(Point)
comment9.text=\r\n\ public\ boolean\ isAbove(Point\ other)\ -\ gets\ an\ other\ point\ and\ check\ if\ its\ under\ this\ point.\r\n\ \r\n\ @param\ \ \ other\ -\ the\ point\ we\ check\ if\ it\ under\ this\ point.\r\n\ @return\ \ true\ if\ the\ other\ point\ is\ under\ this\ point,\r\n\ \ \ \ \ \ \ \ \ \ false\ if\ its\ not.\r\n\ \ \ \ \ \ \ \ \ \ \r\n\ @Time\:\ \ \ O(1);\r\n\ @Place\:\ \ O(1);\r\n
numComments=15
